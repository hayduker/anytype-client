{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Anytype Python Client","text":"<p>A Python client for interacting with Anytype. Automate workflows and integrate with your apps! \u2728</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Seamless Integration: Connect Python scripts directly to your Anytype workspace.</li> <li>Object Management: Create, modify, and organize pages, notes, and custom objects.</li> <li>Space Operations: Manage spaces, types, and relations programmatically.</li> <li>Batch Operations: Export data, automate repetitive tasks, and more.</li> <li>PDF Import Example: Bulk import annotated PDFs as structured notes (see examples).</li> </ul>"},{"location":"about/","title":"Ego vimque nam","text":""},{"location":"about/#primoque-volucrem-quodque-merito","title":"Primoque volucrem quodque merito","text":"<p>Lorem markdownum reguntur partitas sua et lapidumque quoque animae illa dixerat, cum. Formis de artus. Quacumque ignes. Nato media clamavit inmemor languor; est petii tecto quondam.</p> <p>Temptant fecunda tuta? Pictos quem virides relatu: ramum Iuno cornua, sceleratior. Altum eam sui tabularia sic eosdem iuga cur auras et Iuppiter quod vesper Nebrophonosque aut inpia Cinyra: terras.</p>"},{"location":"about/#nam-oves-pellaeus-simile-iasonis-ripis","title":"Nam oves Pellaeus simile Iasonis ripis","text":"<p>Amat enim saevior nunc haec dixit aut calescit quid esse hic hic. Unda turba verba fraudes, inmanem quid sic quod regem et ubi clamato atra. Uni quam vati terra, est Samius mediis bibulas distat tamquam non his iuguloque Athenae vigilans profuso; ascendunt. Sacris agros illis: fluminis adhibete manet nil tergo Tityos iras finitimosque iuvenem praecepta hominem ipse, prohibent.</p>"},{"location":"about/#ionium-vim-minervae-valens","title":"Ionium vim Minervae valens","text":"<p>Unius audita lascivaque lambebat dum sors munere magni harenas quantum semina mandata Illyricos. Conlapsaque saepe dixit nostri Echione, horrida dexteriore ecce! Letoidos socios faciem copia, stantes egreditur Lucifer, quo.</p> <ul> <li>Dixit pedibusque serrae</li> <li>Et capillis victa</li> <li>Libycas eris</li> <li>Haec ramis</li> <li>Tunc pinguescere utque corporis Macareus per labores</li> </ul>"},{"location":"about/#salutifer-meos","title":"Salutifer meos","text":"<p>Videri rore vetus formae posce Corythus oblectamina luridus caput, levi iuncta cutem. Patientia efficiet tamen longeque flammas omne tunc contenta ad gravidamque adusque mille, torum! Quem vobis posse, inmunitamque matre rates mente setius trahatur rediit simul et quoniam, a optantemque, promittis femineae. Audistis regia, duxque est mensae vestigia ille edidit insequitur excutior perque rapta volucrum niveae.</p> <p>Favilla caelum cruentum Cretaei ex turba, mirabere albus sic vertere fertur equus latet. Hoste exul Apollinis partes Iphitiden, tibi matris, conlectus, egreditur nosterque penna non alte. Sonat quo unguibus eodem roboris. Turbida novitasque curis agentis et Herculis quo, et manibus ignipedum. Arne ortum: cur quod mora agmine nati per instruxit, oculis.</p> <p>Remollescit pendent repetemus eadem Bacchica tractare rotis daedalus dumque foedera torva, se cetera arcum timor exitus. Epiros conterruit inlatum. Inque retinacula defendere iudice vivacisque remigis Coronis et selige maiorque gerunt coniunx fecit est sulphure unde. Vult edita incipit lapillis pariter uni mortale cervix sub pereunt.</p>"},{"location":"contributing/","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcomed! Here's how to help:</p> <ol> <li>Report bugs or request features via Issues</li> <li>Submit pull requests for improvements</li> <li>Share your use cases in Discussions</li> </ol> <p>To run unit tests you will need to <code>pip install pytest</code>.</p> <p>To build the documentation you will need to install <code>mkdocs</code> and associated packages:</p> <p><code>pip install mkdocs mkdocs-material mkdocstrings[python]</code></p> <p>Then from within your project directory, you can run <code>mkdocs serve</code> to start a local HTTP server hosting your copy of the docs. For more information see the <code>mkdocs</code> website.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#prerequisites","title":"\u2611\ufe0f Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Anytype desktop app (v0.44.13-beta or higher) running during authentication</li> </ul>"},{"location":"getting-started/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install anytype-client\n</code></pre>"},{"location":"getting-started/#quick-start","title":"\u26a1 Quick Start","text":"<ol> <li>Authentication</li> </ol> <pre><code>from anytype import Anytype\n\n# Initialize client (first run triggers authentication)\nany = Anytype()\nany.auth()  # \ud83d\udd11 Enter 4-digit code from Anytype app when prompted\n</code></pre> <ol> <li>Create Your First Object</li> </ol> <pre><code>from anytype import Object\n\n# Get your workspace\nspaces = any.get_spaces()\nmy_space = spaces[0]  # Use your preferred space\n\n# Create a new page\nnote_type = my_space.get_type(\"Page\")\nnew_note = Object()\nnew_note.name = \"My Python-Powered Note \ud83d\udcdd\"\nnew_note.icon = \"\ud83d\udd25\"\nnew_note.description = \"Automatically generated via Python API\"\n\n# Add rich content\nnew_note.add_title1(\"Welcome to Automated Knowledge Management!\")\nnew_note.add_text(\"This section was created programmatically using:\")\n\n# Commit to workspace\ncreated_object = my_space.create_object(new_note, note_type)\nprint(f\"Created object: {created_object.id}\")\n</code></pre>"},{"location":"getting-started/#examples","title":"\ud83c\udf1f Examples","text":"Example Description Results \ud83d\udcc4 Hello World Create a basic note with formatted text Check Result \ud83d\udcda PDF Notes Importer Batch import annotated PDFs Check Result More examples coming as Anytype API evolves Request a feature \u2694\ufe0f"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#classes","title":"Classes","text":"<ul> <li><code>anytype.Anytype</code></li> <li><code>anytype.Space</code></li> <li><code>anytype.Object</code></li> <li><code>anytype.Type</code></li> </ul>"},{"location":"api/anytype/","title":"<code>anytype.Anytype</code>","text":"<p>Used to interact with the Anytype API for authentication, retrieving spaces, creating spaces, and performing global searches. It provides methods to authenticate via a token, fetch spaces, create new spaces, and search for objects across spaces.</p> Source code in <code>anytype/anytype.py</code> <pre><code>class Anytype:\n    \"\"\"\n    Used to interact with the Anytype API for authentication, retrieving spaces, creating spaces, and performing global searches. It provides methods to authenticate via a token, fetch spaces, create new spaces, and search for objects across spaces.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self.app_name = \"\"\n        self.space_id = \"\"\n        self.token = \"\"\n        self.app_key = \"\"\n        self._apiEndpoints: apiEndpoints | None = None\n        self._headers = {}\n\n\n    def auth(self, force=False, callback=None) -&gt; None:\n        \"\"\"\n        Authenticates the user by retrieving or creating a session token. If the session token already exists, it validates the token. If not, the user will be prompted to enter a 4-digit code for authentication.\n\n        Parameters:\n            force (bool): If True, forces re-authentication even if a token already exists.\n            callback (callable): A callback function to retrieve the 4-digit code. If None, the user will be prompted to enter the code.\n\n        Raises:\n            Raises an error if the authentication request or token validation fails.\n        \"\"\"\n        userdata = self._get_userdata_folder()\n        anytoken = os.path.join(userdata, \"any_token.json\")\n\n        if force and os.path.exists(anytoken):\n            os.remove(anytoken)\n\n        if self.app_name == \"\":\n            self.app_name = \"python-anytype-client\"\n\n        if os.path.exists(anytoken):\n            with open(anytoken) as f:\n                auth_json = json.load(f)\n            self.token = auth_json.get(\"session_token\")\n            self.app_key = auth_json.get(\"app_key\")\n            if self._validate_token():\n                return\n\n        # Inicializa o client de API com o nome do app\n        self._apiEndpoints = apiEndpoints()\n        display_code_response = self._apiEndpoints.displayCode()\n        challenge_id = display_code_response.get(\"challenge_id\")\n\n        if callback is None:\n            api_four_digit_code = input(\"Enter the 4 digit code: \")\n        else:\n            api_four_digit_code = callback()\n\n        token_response = self._apiEndpoints.getToken(challenge_id, api_four_digit_code)\n\n        # Salva o token localmente\n        with open(anytoken, \"w\") as file:\n            json.dump(token_response, file, indent=4)\n\n        self.token = token_response.get(\"session_token\")\n        self.app_key = token_response.get(\"app_key\")\n        self._validate_token()\n\n\n    def _validate_token(self) -&gt; bool:\n        self._headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {self.app_key}\",\n        }\n        self._apiEndpoints = apiEndpoints(self._headers)\n        try:\n            self._apiEndpoints.getSpaces(0, 1)\n            return True\n        except Exception:\n            return False\n\n\n    def _get_userdata_folder(self) -&gt; str:\n        userdata = os.path.join(os.path.expanduser(\"~\"), \".anytype\")\n        if not os.path.exists(userdata):\n            os.makedirs(userdata)\n        if os.name == \"nt\":\n            os.system(f\"attrib +h {userdata}\")\n        return userdata\n\n\n    @requires_auth\n    def get_space(self, spaceId: str) -&gt; Space:\n        response = self._apiEndpoints.getSpace(spaceId)\n        data = response.get(\"space\", {})\n        return Space._from_api(self._apiEndpoints, data)\n\n\n    @requires_auth\n    def get_spaces(self, offset=0, limit=10) -&gt; list[Space]:\n        \"\"\"\n        Retrieves a list of spaces associated with the authenticated user.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 10).\n\n        Returns:\n            A list of Space instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getSpaces(offset, limit)\n        return [\n            Space._from_api(self._apiEndpoints, data)\n            for data in response.get(\"data\", [])\n        ]\n\n\n    @requires_auth\n    def create_space(self, name: str) -&gt; Space:\n        \"\"\"\n        Creates a new space with a given name.\n\n        Parameters:\n            name (str): The name of the space to create.\n\n        Returns:\n            A Space instance representing the newly created space.\n\n        Raises:\n            Raises an error if the space creation request fails.\n        \"\"\"\n        response = self._apiEndpoints.createSpace(name)\n        data = response.get(\"space\", {})\n        return Space._from_api(self._apiEndpoints, data)\n\n\n    @requires_auth\n    def global_search(self, query, offset=0, limit=10) -&gt; list[Object]:\n        \"\"\"\n        Performs a global search for objects across all spaces using a query string.\n\n        Parameters:\n            query (str): The search query string.\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 10).\n\n        Returns:\n            A list of Object instances that match the search query.\n\n        Raises:\n            Raises an error if the search request fails.\n        \"\"\"\n        response = self._apiEndpoints.globalSearch(query, offset, limit)\n        return [\n            Object._from_api(self._apiEndpoints, data)\n            for data in response.get(\"data\", [])\n        ]\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.auth","title":"<code>auth(force=False, callback=None)</code>","text":"<p>Authenticates the user by retrieving or creating a session token. If the session token already exists, it validates the token. If not, the user will be prompted to enter a 4-digit code for authentication.</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>If True, forces re-authentication even if a token already exists.</p> <code>False</code> <code>callback</code> <code>callable</code> <p>A callback function to retrieve the 4-digit code. If None, the user will be prompted to enter the code.</p> <code>None</code> Source code in <code>anytype/anytype.py</code> <pre><code>def auth(self, force=False, callback=None) -&gt; None:\n    \"\"\"\n    Authenticates the user by retrieving or creating a session token. If the session token already exists, it validates the token. If not, the user will be prompted to enter a 4-digit code for authentication.\n\n    Parameters:\n        force (bool): If True, forces re-authentication even if a token already exists.\n        callback (callable): A callback function to retrieve the 4-digit code. If None, the user will be prompted to enter the code.\n\n    Raises:\n        Raises an error if the authentication request or token validation fails.\n    \"\"\"\n    userdata = self._get_userdata_folder()\n    anytoken = os.path.join(userdata, \"any_token.json\")\n\n    if force and os.path.exists(anytoken):\n        os.remove(anytoken)\n\n    if self.app_name == \"\":\n        self.app_name = \"python-anytype-client\"\n\n    if os.path.exists(anytoken):\n        with open(anytoken) as f:\n            auth_json = json.load(f)\n        self.token = auth_json.get(\"session_token\")\n        self.app_key = auth_json.get(\"app_key\")\n        if self._validate_token():\n            return\n\n    # Inicializa o client de API com o nome do app\n    self._apiEndpoints = apiEndpoints()\n    display_code_response = self._apiEndpoints.displayCode()\n    challenge_id = display_code_response.get(\"challenge_id\")\n\n    if callback is None:\n        api_four_digit_code = input(\"Enter the 4 digit code: \")\n    else:\n        api_four_digit_code = callback()\n\n    token_response = self._apiEndpoints.getToken(challenge_id, api_four_digit_code)\n\n    # Salva o token localmente\n    with open(anytoken, \"w\") as file:\n        json.dump(token_response, file, indent=4)\n\n    self.token = token_response.get(\"session_token\")\n    self.app_key = token_response.get(\"app_key\")\n    self._validate_token()\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.create_space","title":"<code>create_space(name)</code>","text":"<p>Creates a new space with a given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the space to create.</p> required <p>Returns:</p> Type Description <code>Space</code> <p>A Space instance representing the newly created space.</p> Source code in <code>anytype/anytype.py</code> <pre><code>@requires_auth\ndef create_space(self, name: str) -&gt; Space:\n    \"\"\"\n    Creates a new space with a given name.\n\n    Parameters:\n        name (str): The name of the space to create.\n\n    Returns:\n        A Space instance representing the newly created space.\n\n    Raises:\n        Raises an error if the space creation request fails.\n    \"\"\"\n    response = self._apiEndpoints.createSpace(name)\n    data = response.get(\"space\", {})\n    return Space._from_api(self._apiEndpoints, data)\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.get_spaces","title":"<code>get_spaces(offset=0, limit=10)</code>","text":"<p>Retrieves a list of spaces associated with the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 10).</p> <code>10</code> <p>Returns:</p> Type Description <code>list[Space]</code> <p>A list of Space instances.</p> Source code in <code>anytype/anytype.py</code> <pre><code>@requires_auth\ndef get_spaces(self, offset=0, limit=10) -&gt; list[Space]:\n    \"\"\"\n    Retrieves a list of spaces associated with the authenticated user.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 10).\n\n    Returns:\n        A list of Space instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getSpaces(offset, limit)\n    return [\n        Space._from_api(self._apiEndpoints, data)\n        for data in response.get(\"data\", [])\n    ]\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.global_search","title":"<code>global_search(query, offset=0, limit=10)</code>","text":"<p>Performs a global search for objects across all spaces using a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query string.</p> required <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 10).</p> <code>10</code> <p>Returns:</p> Type Description <code>list[Object]</code> <p>A list of Object instances that match the search query.</p> Source code in <code>anytype/anytype.py</code> <pre><code>@requires_auth\ndef global_search(self, query, offset=0, limit=10) -&gt; list[Object]:\n    \"\"\"\n    Performs a global search for objects across all spaces using a query string.\n\n    Parameters:\n        query (str): The search query string.\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 10).\n\n    Returns:\n        A list of Object instances that match the search query.\n\n    Raises:\n        Raises an error if the search request fails.\n    \"\"\"\n    response = self._apiEndpoints.globalSearch(query, offset, limit)\n    return [\n        Object._from_api(self._apiEndpoints, data)\n        for data in response.get(\"data\", [])\n    ]\n</code></pre>"},{"location":"api/object/","title":"<code>anytype.Object</code>","text":"<p>               Bases: <code>APIWrapper</code></p> <p>Used to create and manipulate objects within a specific space. It can be customized with properties like <code>name</code>, <code>icon</code>, <code>body</code>, <code>description</code>, and more. The class also provides methods for exporting objects and adding various types of content to the object body, such as titles, text, code blocks, checkboxes, and bullets.</p> Source code in <code>anytype/object.py</code> <pre><code>class Object(APIWrapper):\n    \"\"\"\n    Used to create and manipulate objects within a specific space. It can be customized with properties like `name`, `icon`, `body`, `description`, and more. The class also provides methods for exporting objects and adding various types of content to the object body, such as titles, text, code blocks, checkboxes, and bullets.\n    \"\"\"\n\n    def __init__(self):\n        self._apiEndpoints: apiEndpoints | None = None\n        self.id: str = \"\"\n        self.source: str = \"\"\n        self.type: dict = {}\n        self.name: str = \"\"\n        self._icon: str | Icon = \"\"\n        self.body: str = \"\"\n        self.description: str = \"\"\n        self.blocks: list[Block] = []\n        self.details = []\n        self.layout: str = \"basic\"\n        self.properties: list = []\n\n        self.root_id: str = \"\"\n        self.space_id: str = \"\"\n        self.template_id: str = \"\"\n\n        self.snippet: str = \"\"\n        self.type_key: str = \"\"\n\n\n    @property\n    def icon(self):\n        return self._icon\n\n\n    @icon.setter\n    def icon(self, value):\n        emoji_pattern = re.compile(\n            \"[\\U0001F600-\\U0001F64F\"\n            \"\\U0001F300-\\U0001F5FF\"\n            \"\\U0001F680-\\U0001F6FF\"\n            \"\\U0001F1E0-\\U0001F1FF\"\n            \"\\U00002702-\\U000027B0\"\n            \"\\U000024C2-\\U0001F251\"\n            \"]+\",\n            flags=re.UNICODE,\n        )\n\n        if bool(emoji_pattern.fullmatch(value)):\n            icon = Icon()\n            icon.emoji = value\n            self._icon = icon\n\n\n    @requires_auth\n    def export(self, folder: str, format: str = \"markdown\") -&gt; None:\n        \"\"\"\n        Exports the object to a specified folder and format (either markdown or protobuf).\n\n        Parameters:\n            folder (str): The path to the output folder where the object will be exported.\n            format (str, optional): The export format, either \"markdown\" or \"protobuf\". Default is \"markdown\".\n\n        Returns:\n            None\n\n        Raises:\n            Raises an error if the request to the API fails.\n\n        Note:\n            If using Linux, a note is printed indicating potential issues with Anytype for Flatpak.\n        \"\"\"\n\n        path = Path(folder)\n        if not path.is_absolute():\n            path = Path.cwd() / path\n\n        assert format in [\"markdown\", \"protobuf\"]\n        self._apiEndpoints.getExport(self.space_id, self.id, format)\n        if platform.system() == \"Linux\":\n            print(\"Note that this will not work on Anytype for flatpak, even without any errors\")\n\n\n    def add_type(self, type: Type):\n        self.template_id = type.template_id\n        self.type_key = type.key\n\n\n    # \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    # \u2502 Hope that Anytype API make some way  \u2502\n    # \u2502 to create blocks, then this will be  \u2502\n    # \u2502           probably removed           \u2502\n    # \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n    def add_title1(self, text) -&gt; None:\n        self.body += f\"# {text}\\n\"\n\n    def add_title2(self, text) -&gt; None:\n        self.body += f\"## {text}\\n\"\n\n    def add_title3(self, text) -&gt; None:\n        self.body += f\"### {text}\\n\"\n\n    def add_text(self, text) -&gt; None:\n        self.body += f\"{text}\\n\"\n\n    def add_codeblock(self, code, language=\"\"):\n        self.body += f\"``` {language}\\n{code}\\n```\\n\"\n\n    def add_bullet(self, text) -&gt; None:\n        self.body += f\"- {text}\\n\"\n\n    def add_checkbox(self, text, checked=False) -&gt; None:\n        self.body += f\"- [x] {text}\\n\" if checked else f\"- [ ] {text}\\n\"\n\n    def add_image(self, image_url: str, alt: str = \"\", title: str = \"\") -&gt; None:\n        if title:\n            self.body += f'![{alt}]({image_url} \"{title}\")\\n'\n        else:\n            self.body += f\"![{alt}]({image_url})\\n\"\n\n    def __repr__(self):\n        return f\"&lt;Object(name={self.name},type={self.type['name']})&gt;\"\n</code></pre>"},{"location":"api/object/#anytype.Object.export","title":"<code>export(folder, format='markdown')</code>","text":"<p>Exports the object to a specified folder and format (either markdown or protobuf).</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>The path to the output folder where the object will be exported.</p> required <code>format</code> <code>str</code> <p>The export format, either \"markdown\" or \"protobuf\". Default is \"markdown\".</p> <code>'markdown'</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Note <p>If using Linux, a note is printed indicating potential issues with Anytype for Flatpak.</p> Source code in <code>anytype/object.py</code> <pre><code>@requires_auth\ndef export(self, folder: str, format: str = \"markdown\") -&gt; None:\n    \"\"\"\n    Exports the object to a specified folder and format (either markdown or protobuf).\n\n    Parameters:\n        folder (str): The path to the output folder where the object will be exported.\n        format (str, optional): The export format, either \"markdown\" or \"protobuf\". Default is \"markdown\".\n\n    Returns:\n        None\n\n    Raises:\n        Raises an error if the request to the API fails.\n\n    Note:\n        If using Linux, a note is printed indicating potential issues with Anytype for Flatpak.\n    \"\"\"\n\n    path = Path(folder)\n    if not path.is_absolute():\n        path = Path.cwd() / path\n\n    assert format in [\"markdown\", \"protobuf\"]\n    self._apiEndpoints.getExport(self.space_id, self.id, format)\n    if platform.system() == \"Linux\":\n        print(\"Note that this will not work on Anytype for flatpak, even without any errors\")\n</code></pre>"},{"location":"api/space/","title":"<code>anytype.Space</code>","text":"<p>               Bases: <code>APIWrapper</code></p> <p>Used to interact with and manage objects, types, and other elements within a specific Space. It provides methods to retrieve objects, types, and perform search operations within the space. Additionally, it allows creating new objects associated with specific types.</p> Source code in <code>anytype/space.py</code> <pre><code>class Space(APIWrapper):\n    \"\"\"\n    Used to interact with and manage objects, types, and other elements within a specific Space. It provides methods to retrieve objects, types, and perform search operations within the space. Additionally, it allows creating new objects associated with specific types.\n    \"\"\"\n\n    def __init__(self):\n        self._apiEndpoints: apiEndpoints | None = None\n        self.name = \"\"\n        self.id = \"\"\n        self._all_types = []\n\n\n    @requires_auth\n    def get_object(self, objectId: str) -&gt; Object:\n        \"\"\"\n        Retrieves a specific object by its ID.\n\n        Parameters:\n            objectId (str): The ID of the object to retrieve.\n\n        Returns:\n            An Object instance representing the retrieved object.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getObject(self.id, objectId)\n        data = response.get(\"object\", {})\n        return Object._from_api(self._apiEndpoints, data)\n\n\n    @requires_auth\n    def delete_object(self, objectId: str) -&gt; None:\n        # BUG: not working yet\n        self._apiEndpoints.deleteObject(self.id, objectId)\n\n\n    @requires_auth\n    def get_objects(self, offset=0, limit=100) -&gt; list[Object]:\n        \"\"\"\n        Retrieves a list of objects associated with the space.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 100).\n\n        Returns:\n            A list of Object instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response_data = self._apiEndpoints.getObjects(self.id, offset, limit)\n        objects = [\n            Object._from_api(self._apiEndpoints, data)\n            for data in response_data.get(\"data\", [])\n        ]\n\n        self._all_types = objects # TODO: is this supposed to be here?\n        return objects\n\n\n    @requires_auth\n    def get_type(self, typeId: str) -&gt; Type:\n        \"\"\"\n        Retrieves a specific type by its ID.\n\n        Parameters:\n            type_name (str): The name of the type to retrieve.\n\n        Returns:\n            A Type instance representing the type.\n\n        Raises:\n            ValueError: If the type with the specified name is not found.\n        \"\"\"\n        response = self._apiEndpoints.getType(self.id, typeId)\n        data = response.get(\"type\", {})\n        # TODO: Sometimes we need to add more attributes beyond the ones in the \n        # API response. There might be a cleaner way to do this, but doing\n        # a dict merge with | works for now.\n        return Type._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n\n\n    @requires_auth\n    def get_types(self, offset=0, limit=100) -&gt; list[Type]:\n        \"\"\"\n        Retrieves a list of types associated with the space.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 100).\n\n        Returns:\n            A list of Type instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getTypes(self.id, offset, limit)\n        types = [\n            Type._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n            for data in response.get(\"data\", [])\n        ]\n\n        self._all_types = types\n        return types\n\n\n    def get_typebyname(self, name: str) -&gt; Type:\n        all_types = self.get_types(limit=200)\n        for type in all_types:\n            if type.name == name:\n                return type\n\n        raise ValueError(\"Type not found\")\n\n\n    @requires_auth\n    def get_member(self, memberId: str) -&gt; Member:\n        response = self._apiEndpoints.getMember(self.id, memberId)\n        data = response.get(\"object\", {})\n        return Member._from_api(self._apiEndpoints, data)\n\n\n    @requires_auth\n    def get_members(self, offset: int = 0, limit: int = 100) -&gt; list[Member]:\n        \"\"\"\n        Retrieves a list of members associated with the space.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 100).\n\n        Returns:\n            A list of Member instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getMembers(self.id, offset, limit)\n        return [\n            Member._from_api(self._apiEndpoints, data)\n            for data in response.get(\"data\", [])\n        ]\n\n\n    def get_listviewfromobject(\n        self, obj: Object, offset: int = 0, limit: int = 100\n    ) -&gt; list[ListView]:\n        if obj.type != \"Collection\":\n            raise ValueError(\"Object is not a collection\")\n        return self.get_listviews(obj.id, offset, limit)\n\n\n    @requires_auth\n    def get_listviews(self, listId: str, offset: int = 0, limit: int = 100) -&gt; list[ListView]:\n        response = self._apiEndpoints.getListViews(self.id, listId, offset, limit)\n        return [\n            ListView._from_api(self._apiEndpoints, data | {\n                \"space_id\": self.id,\n                \"list_id\": listId,\n            })\n            for data in response.get(\"data\", [])\n        ]\n\n\n    @requires_auth\n    def search(self, query, offset=0, limit=10) -&gt; list[Object]:\n        \"\"\"\n        Performs a search for objects in the space using a query string.\n\n        Parameters:\n            query (str): The search query string.\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 10).\n\n        Returns:\n            A list of Object instances that match the search query.\n\n        Raises:\n            ValueError: If the space ID is not set.\n        \"\"\"\n        if self.id == \"\":\n            raise ValueError(\"Space ID is required\")\n\n        response = self._apiEndpoints.search(self.id, query, offset, limit)\n        return [\n            Object._from_api(self._apiEndpoints, data)\n            for data in response.get(\"data\", [])\n        ]\n\n\n    @requires_auth\n    def create_object(self, obj: Object, type: Type = Type()) -&gt; Object:\n        \"\"\"\n        Creates a new object within the space, associated with a specified type.\n\n        Parameters:\n            obj (Object): The Object instance to create.\n            type (Type): The Type instance to associate the object with.\n\n        Returns:\n            A new Object instance representing the created object.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        if type.key == \"\" and obj.type_key == \"\":\n            raise Exception(\n                \"You need to set one type for the object, use add_type method from the Object class\"\n            )\n\n        type_key = obj.type_key if obj.type_key != \"\" else type.key\n        template_id = obj.template_id if obj.template_id != \"\" else type.template_id\n\n        icon = {}\n        if isinstance(obj.icon, Icon):\n            icon = obj.icon._get_json()\n        else:\n            raise ValueError(\"Invalid icon type\")\n\n        object_data = {\n            \"icon\": icon,\n            \"name\": obj.name,\n            \"description\": obj.description,\n            \"body\": obj.body,\n            \"source\": \"\",\n            \"template_id\": template_id,\n            \"type_key\": type_key,\n        }\n\n        obj_clone = deepcopy(obj)\n        obj_clone._apiEndpoints = self._apiEndpoints\n        obj_clone.space_id = self.id\n\n        response = self._apiEndpoints.createObject(self.id, object_data)\n\n        for key, value in response.get(\"object\", {}).items():\n            if key == \"icon\":\n                icon = Icon()\n                icon._update_with_json(value)\n            else:\n                obj_clone.__dict__[key] = value\n\n        return obj_clone\n\n\n    def __repr__(self):\n        return f\"&lt;Space(name={self.name})&gt;\"\n</code></pre>"},{"location":"api/space/#anytype.Space.create_object","title":"<code>create_object(obj, type=Type())</code>","text":"<p>Creates a new object within the space, associated with a specified type.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Object</code> <p>The Object instance to create.</p> required <code>type</code> <code>Type</code> <p>The Type instance to associate the object with.</p> <code>Type()</code> <p>Returns:</p> Type Description <code>Object</code> <p>A new Object instance representing the created object.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef create_object(self, obj: Object, type: Type = Type()) -&gt; Object:\n    \"\"\"\n    Creates a new object within the space, associated with a specified type.\n\n    Parameters:\n        obj (Object): The Object instance to create.\n        type (Type): The Type instance to associate the object with.\n\n    Returns:\n        A new Object instance representing the created object.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    if type.key == \"\" and obj.type_key == \"\":\n        raise Exception(\n            \"You need to set one type for the object, use add_type method from the Object class\"\n        )\n\n    type_key = obj.type_key if obj.type_key != \"\" else type.key\n    template_id = obj.template_id if obj.template_id != \"\" else type.template_id\n\n    icon = {}\n    if isinstance(obj.icon, Icon):\n        icon = obj.icon._get_json()\n    else:\n        raise ValueError(\"Invalid icon type\")\n\n    object_data = {\n        \"icon\": icon,\n        \"name\": obj.name,\n        \"description\": obj.description,\n        \"body\": obj.body,\n        \"source\": \"\",\n        \"template_id\": template_id,\n        \"type_key\": type_key,\n    }\n\n    obj_clone = deepcopy(obj)\n    obj_clone._apiEndpoints = self._apiEndpoints\n    obj_clone.space_id = self.id\n\n    response = self._apiEndpoints.createObject(self.id, object_data)\n\n    for key, value in response.get(\"object\", {}).items():\n        if key == \"icon\":\n            icon = Icon()\n            icon._update_with_json(value)\n        else:\n            obj_clone.__dict__[key] = value\n\n    return obj_clone\n</code></pre>"},{"location":"api/space/#anytype.Space.get_members","title":"<code>get_members(offset=0, limit=100)</code>","text":"<p>Retrieves a list of members associated with the space.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Member]</code> <p>A list of Member instances.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_members(self, offset: int = 0, limit: int = 100) -&gt; list[Member]:\n    \"\"\"\n    Retrieves a list of members associated with the space.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 100).\n\n    Returns:\n        A list of Member instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getMembers(self.id, offset, limit)\n    return [\n        Member._from_api(self._apiEndpoints, data)\n        for data in response.get(\"data\", [])\n    ]\n</code></pre>"},{"location":"api/space/#anytype.Space.get_object","title":"<code>get_object(objectId)</code>","text":"<p>Retrieves a specific object by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>objectId</code> <code>str</code> <p>The ID of the object to retrieve.</p> required <p>Returns:</p> Type Description <code>Object</code> <p>An Object instance representing the retrieved object.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_object(self, objectId: str) -&gt; Object:\n    \"\"\"\n    Retrieves a specific object by its ID.\n\n    Parameters:\n        objectId (str): The ID of the object to retrieve.\n\n    Returns:\n        An Object instance representing the retrieved object.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getObject(self.id, objectId)\n    data = response.get(\"object\", {})\n    return Object._from_api(self._apiEndpoints, data)\n</code></pre>"},{"location":"api/space/#anytype.Space.get_objects","title":"<code>get_objects(offset=0, limit=100)</code>","text":"<p>Retrieves a list of objects associated with the space.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Object]</code> <p>A list of Object instances.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_objects(self, offset=0, limit=100) -&gt; list[Object]:\n    \"\"\"\n    Retrieves a list of objects associated with the space.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 100).\n\n    Returns:\n        A list of Object instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response_data = self._apiEndpoints.getObjects(self.id, offset, limit)\n    objects = [\n        Object._from_api(self._apiEndpoints, data)\n        for data in response_data.get(\"data\", [])\n    ]\n\n    self._all_types = objects # TODO: is this supposed to be here?\n    return objects\n</code></pre>"},{"location":"api/space/#anytype.Space.get_type","title":"<code>get_type(typeId)</code>","text":"<p>Retrieves a specific type by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>type_name</code> <code>str</code> <p>The name of the type to retrieve.</p> required <p>Returns:</p> Type Description <code>Type</code> <p>A Type instance representing the type.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the type with the specified name is not found.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_type(self, typeId: str) -&gt; Type:\n    \"\"\"\n    Retrieves a specific type by its ID.\n\n    Parameters:\n        type_name (str): The name of the type to retrieve.\n\n    Returns:\n        A Type instance representing the type.\n\n    Raises:\n        ValueError: If the type with the specified name is not found.\n    \"\"\"\n    response = self._apiEndpoints.getType(self.id, typeId)\n    data = response.get(\"type\", {})\n    # TODO: Sometimes we need to add more attributes beyond the ones in the \n    # API response. There might be a cleaner way to do this, but doing\n    # a dict merge with | works for now.\n    return Type._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n</code></pre>"},{"location":"api/space/#anytype.Space.get_types","title":"<code>get_types(offset=0, limit=100)</code>","text":"<p>Retrieves a list of types associated with the space.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Type]</code> <p>A list of Type instances.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_types(self, offset=0, limit=100) -&gt; list[Type]:\n    \"\"\"\n    Retrieves a list of types associated with the space.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 100).\n\n    Returns:\n        A list of Type instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getTypes(self.id, offset, limit)\n    types = [\n        Type._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n        for data in response.get(\"data\", [])\n    ]\n\n    self._all_types = types\n    return types\n</code></pre>"},{"location":"api/space/#anytype.Space.search","title":"<code>search(query, offset=0, limit=10)</code>","text":"<p>Performs a search for objects in the space using a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query string.</p> required <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 10).</p> <code>10</code> <p>Returns:</p> Type Description <code>list[Object]</code> <p>A list of Object instances that match the search query.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the space ID is not set.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef search(self, query, offset=0, limit=10) -&gt; list[Object]:\n    \"\"\"\n    Performs a search for objects in the space using a query string.\n\n    Parameters:\n        query (str): The search query string.\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 10).\n\n    Returns:\n        A list of Object instances that match the search query.\n\n    Raises:\n        ValueError: If the space ID is not set.\n    \"\"\"\n    if self.id == \"\":\n        raise ValueError(\"Space ID is required\")\n\n    response = self._apiEndpoints.search(self.id, query, offset, limit)\n    return [\n        Object._from_api(self._apiEndpoints, data)\n        for data in response.get(\"data\", [])\n    ]\n</code></pre>"},{"location":"api/type/","title":"<code>anytype.Type</code>","text":"<p>               Bases: <code>APIWrapper</code></p> <p>The Type class is used to interact with and manage templates in a specific space. It allows for retrieving available templates, setting a specific template for a type, and handling template-related actions within the space.</p> Source code in <code>anytype/type.py</code> <pre><code>class Type(APIWrapper):\n    \"\"\"\n    The Type class is used to interact with and manage templates in a specific space. It allows for retrieving available templates, setting a specific template for a type, and handling template-related actions within the space.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        self._apiEndpoints: apiEndpoints | None = None\n        self._all_templates = []\n        self.type = \"\"\n        self.space_id = \"\"\n        self.id = \"\"\n        self.name = \"\"\n        self.icon = {}\n        self.key = \"\"\n        self.template_id = \"\"\n        if name != \"\":\n            self.set_template(name)\n\n    @requires_auth\n    def get_templates(self, offset: int = 0, limit: int = 100) -&gt; list[Template]:\n        \"\"\"\n        Retrieves all templates associated with the type from the API.\n\n        Parameters:\n            offset (int): The offset to start retrieving templates (default: 0).\n            limit (int): The maximum number of templates to retrieve (default: 100).\n\n        Returns:\n            A list of Template objects.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getTemplates(self.space_id, self.id, offset, limit)\n        self._all_templates = [\n            Template._from_api(self._apiEndpoints, data)\n            for data in response.get(\"data\", [])\n        ]\n\n        return self._all_templates\n\n\n    def set_template(self, template_name: str) -&gt; None:\n        \"\"\"\n        Sets a template for the type by name. If no templates are loaded, it will first fetch all templates.\n\n        Parameters:\n            template_name (str): The name of the template to assign.\n\n        Returns:\n            None\n\n        Raises:\n            ValueError: If a template with the specified name is not found.\n        \"\"\"\n        if len(self._all_templates) == 0:\n            self.get_templates()\n\n        found = False\n        for template in self._all_templates:\n            if template.name == template_name:\n                found = True\n                self.template_id = template.id\n                return\n        if not found:\n            raise ValueError(\n                f\"Type '{self.name}' does not have \" \"a template named '{template_name}'\"\n            )\n\n    @requires_auth\n    def get_template(self, id: str) -&gt; Template:\n        response = self._apiEndpoints.getTemplate(self.space_id, self.id, id)\n\n        # TODO: This API response is unlike the rest, it returns a list for\n        # \"data\" even though we're asking for info on a single template.\n        # Bug in anytype-heart, or am I misunderstanding?\n        datas = response.get(\"data\", [])\n        if len(datas) &gt; 1:\n            print(f\"getTemplate response data has more than one entry: {response}\")\n\n        return Template._from_api(self._apiEndpoints, datas[0])\n\n    @requires_auth\n    def get_template(self, id: str) -&gt; Template:\n        response_data = self._apiEndpoints.getTemplate(self.space_id, self.id, id)\n\n        template = Template()\n        template._apiEndpoints = self._apiEndpoints\n        for data in response_data.get(\"data\", []):\n            for key, value in data.items():\n                template.__dict__[key] = value\n\n        return template\n\n    def __repr__(self):\n        if \"emoji\" in self.icon:\n            return f\"&lt;Type(name={self.name}, icon={self.icon['emoji']})&gt;\"\n        else:\n            return f\"&lt;Type(name={self.name}, icon={self.icon['name']})&gt;\"\n</code></pre>"},{"location":"api/type/#anytype.Type.get_templates","title":"<code>get_templates(offset=0, limit=100)</code>","text":"<p>Retrieves all templates associated with the type from the API.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset to start retrieving templates (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of templates to retrieve (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Template]</code> <p>A list of Template objects.</p> Source code in <code>anytype/type.py</code> <pre><code>@requires_auth\ndef get_templates(self, offset: int = 0, limit: int = 100) -&gt; list[Template]:\n    \"\"\"\n    Retrieves all templates associated with the type from the API.\n\n    Parameters:\n        offset (int): The offset to start retrieving templates (default: 0).\n        limit (int): The maximum number of templates to retrieve (default: 100).\n\n    Returns:\n        A list of Template objects.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getTemplates(self.space_id, self.id, offset, limit)\n    self._all_templates = [\n        Template._from_api(self._apiEndpoints, data)\n        for data in response.get(\"data\", [])\n    ]\n\n    return self._all_templates\n</code></pre>"},{"location":"api/type/#anytype.Type.set_template","title":"<code>set_template(template_name)</code>","text":"<p>Sets a template for the type by name. If no templates are loaded, it will first fetch all templates.</p> <p>Parameters:</p> Name Type Description Default <code>template_name</code> <code>str</code> <p>The name of the template to assign.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a template with the specified name is not found.</p> Source code in <code>anytype/type.py</code> <pre><code>def set_template(self, template_name: str) -&gt; None:\n    \"\"\"\n    Sets a template for the type by name. If no templates are loaded, it will first fetch all templates.\n\n    Parameters:\n        template_name (str): The name of the template to assign.\n\n    Returns:\n        None\n\n    Raises:\n        ValueError: If a template with the specified name is not found.\n    \"\"\"\n    if len(self._all_templates) == 0:\n        self.get_templates()\n\n    found = False\n    for template in self._all_templates:\n        if template.name == template_name:\n            found = True\n            self.template_id = template.id\n            return\n    if not found:\n        raise ValueError(\n            f\"Type '{self.name}' does not have \" \"a template named '{template_name}'\"\n        )\n</code></pre>"}]}